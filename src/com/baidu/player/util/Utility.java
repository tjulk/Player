package com.baidu.player.util;

import java.util.regex.Pattern;

import org.apache.http.params.HttpConnectionParams;

import com.baidu.browser.net.ProxyHttpClient;

import android.app.Activity;
import android.content.Context;
import android.net.Uri;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.view.View;
import android.view.inputmethod.InputMethodManager;

/**
 * @ClassName: Utility 
 * @Description: 常用工具类
 * @author LEIKANG 
 * @date 2012-12-12 上午10:39:47
 */
public class Utility {
	
    /** density */
    private static int mDensity = android.util.DisplayMetrics.DENSITY_HIGH;
	
    /**
     * Hides the input method.
     * @param context context
     * @param view The currently focused view
     */
    public static void hideInputMethod(Context context, View view) {
        if (context == null || view == null) {
            return;
        }
        
        InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);
        if (imm != null) {
            imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
        }
    }
    
    /**
     * @Title: isInputMethodActive 
     * @Description: 输入法是否弹出
     * @param context
     * @param view
     * @return boolean
     */
    public static boolean isInputMethodActive(Context context, View view) {
        InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);
        if (imm != null) {
        	return imm.isActive(view);
        }
        return false;
    }
    
    /**
     * Show the input method.
     * @param context context
     * @param view The currently focused view, which would like to receive soft keyboard input
     */
    public static void showInputMethod(Context context, View view) {
        if (context == null || view == null) {
            return;
        }
        
        InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);
        if (imm != null) {
            imm.showSoftInput(view, 0);
        }
    }

    
    /**
     * @Title: setScreenDensity 
     * @Description: 设置屏幕 Density
     * @param mContext  
     */
	public static void setScreenDensity(Context mContext) {
        DisplayMetrics dm = new DisplayMetrics();
        ((Activity) mContext).getWindowManager().getDefaultDisplay().getMetrics(dm);
        mDensity = dm.densityDpi;		
	}
	
	/**
	 * @Title: getScreenDensity 
	 * @Description: 获取屏幕density
	 * @return int
	 */
    public static int getScreenDensity() {
        return mDensity;
    }
    
    
    /**
     * Good characters for Internationalized Resource Identifiers (IRI).
     * This comprises most common used Unicode characters allowed in IRI
     * as detailed in RFC 3987.
     * Specifically, those two byte Unicode characters are not included.
     */
    private static final String GOOD_IRI_CHAR =
        "a-zA-Z0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF";
    
    /**
     *  Regular expression to match all IANA top-level domains for WEB_URL.
     *  List accurate as of 2010/02/05.  List taken from:
     *  http://data.iana.org/TLD/tlds-alpha-by-domain.txt
     *  This pattern is auto-generated by frameworks/base/common/tools/make-iana-tld-pattern.py
     */
    private static final String TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL =
        "(?:"
        + "(?:aero|arpa|asia|a[cdefgilmnoqrstuwxz])"
        + "|(?:biz|b[abdefghijmnorstvwyz])"
        + "|(?:cat|com|coop|c[acdfghiklmnoruvxyz])"
        + "|d[ejkmoz]"
        + "|(?:edu|e[cegrstu])"
        + "|f[ijkmor]"
        + "|(?:gov|g[abdefghilmnpqrstuwy])"
        + "|h[kmnrtu]"
        + "|(?:info|int|i[delmnoqrst])"
        + "|(?:jobs|j[emop])"
        + "|k[eghimnprwyz]"
        + "|l[abcikrstuvy]"
        + "|(?:mil|mobi|museum|m[acdeghklmnopqrstuvwxyz])"
        + "|(?:name|net|n[acefgilopruz])"
        + "|(?:org|om)"
        + "|(?:pro|p[aefghklmnrstwy])"
        + "|qa"
        + "|r[eosuw]"
        + "|s[abcdeghijklmnortuvyz]"
        + "|(?:tel|travel|t[cdfghjklmnoprtvwz])"
        + "|u[agksyz]"
        + "|v[aceginu]"
        + "|w[fs]"
        + "|(?:xn\\-\\-0zwm56d|xn\\-\\-11b5bs3a9aj6g|xn\\-\\-80akhbyknj4f|xn\\-\\-9t4b11yi5a|xn\\-\\-deba0ad|xn\\-\\-g6w251d|xn\\-\\-hgbk6aj7f53bba|xn\\-\\-hlcj6aya9esc7a|xn\\-\\-jxalpdlp|xn\\-\\-kgbechtv|xn\\-\\-zckzah)" //SUPPRESS CHECKSTYLE
        + "|y[etu]"
        + "|z[amw]))";
    
    /**
     *  Regular expression pattern to match most part of RFC 3987
     *  Internationalized URLs, aka IRIs.  Commonly used Unicode characters are
     *  added.
     */
    private static final Pattern WEB_URL = Pattern.compile(
        "((?:(http|https|Http|Https):\\/\\/(?:(?:[a-zA-Z0-9\\$\\-\\_\\.\\+\\!\\*\\'\\(\\)"
        + "\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,64}(?:\\:(?:[a-zA-Z0-9\\$\\-\\_"
        + "\\.\\+\\!\\*\\'\\(\\)\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,25})?\\@)?)?"
        + "((?:(?:[" + GOOD_IRI_CHAR + "][" + GOOD_IRI_CHAR + "\\-]{0,64}\\.)+"   // named host
        + TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL
        + "|(?:(?:25[0-5]|2[0-4]" // or ip address
        + "[0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9])\\.(?:25[0-5]|2[0-4][0-9]"
        + "|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(?:25[0-5]|2[0-4][0-9]|[0-1]"
        + "[0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}"
        + "|[1-9][0-9]|[0-9])))"
        + "(?:\\:\\d{1,5})?)" // plus option port number
        + "(\\/(?:(?:[" + GOOD_IRI_CHAR + "\\;\\/\\?\\:\\@\\&\\=\\#\\~"  // plus option query params
        + "\\-\\.\\+\\!\\*\\'\\(\\)\\,\\_])|(?:\\%[a-fA-F0-9]{2}))*)?"
        + "(?:\\b|$)");  
    
    /**
     * @Title: isUrl 
     * @Description: 判断一个字符串是否为合法url 
     * @param query
     * @return boolean 是合法url
     */
    public static boolean isUrl(String query) {
        return WEB_URL.matcher(query).matches();
    }
    
    /**
     * @Title: fixUrl 
     * @Description: 对url进行校正. 
     * @param inUrl 输入的url
     * @return String 输出的url
     */
    public static String fixUrl(String inUrl) {
    	if (inUrl == null) {
    		return "";
    	}
        int colon = inUrl.indexOf(':');
        boolean allLower = true;
        for (int index = 0; index < colon; index++) {
            char ch = inUrl.charAt(index);
            if (!Character.isLetter(ch)) {
                break;
            }
            allLower &= Character.isLowerCase(ch);
            if (index == colon - 1 && !allLower) {
                inUrl = inUrl.substring(0, colon).toLowerCase()
                        + inUrl.substring(colon);
            }
        }
        if (inUrl.startsWith("http://")
        		|| inUrl.startsWith("https://")) {
        	return inUrl;
        }
        if (inUrl.startsWith("http:")
        		|| inUrl.startsWith("https:")) {
            if (inUrl.startsWith("http:/")
            		|| inUrl.startsWith("https:/")) {
                inUrl = inUrl.replaceFirst("/", "//");
            } else {
            	inUrl = inUrl.replaceFirst(":", "://");
            }
        }
        return inUrl;
    }
    
	/**
	 * 对url中的参数进行编码.
	 * @param url String
	 * @return 编码后的url
	 */
	public static String encodeUrl(String url) {
		int index = url.indexOf("?");
		if (index != -1
				&& index + 1 <= url.length()) { //对url 问号后的部分编码
			String tmpUrl = url.substring(0, index + 1);
			String param = url.substring(index + 1);
			param = urlEncode(param);
			url = tmpUrl + param;
		}
		return url;
	}
	
	/**
	 * 对url参数的value进行utf-8编码.
	 * @param str Url.
	 * @return Url.
	 */
	private static String urlEncode(String str) {
		if (TextUtils.isEmpty(str)) {
			return "";
		}
		StringBuffer sb = new StringBuffer(str.length() * 2);
		String[] pairs = str.split("&");
		int size = pairs.length;
		String pair;
		for (int i = 0; i < size; i++) {
			pair = pairs[i];
			int idx = pair.indexOf("=");
			if (idx > 0 && pair.indexOf("%") < 0) {
				String value = pair.substring(idx + 1);
				sb.append(pair.substring(0, idx));
				sb.append('=');
				sb.append(Uri.encode(value));
			} else {
				sb.append(pair);
			}
			if (i < size - 1) {
				sb.append('&');
			}
		}

		return sb.toString().trim();
	}
	
	/**
	 * @Title: createHttpClient 
	 * @Description: 创建一个httpclient
	 * @param context
	 * @return   
	 * ProxyHttpClient
	 */
	public static ProxyHttpClient createHttpClient(Context context) {
	    ProxyHttpClient httpclient = new ProxyHttpClient(context);
	    final int httpTimeout = 30000;
	    final int socketTimeout = 50000;
		HttpConnectionParams.setConnectionTimeout(httpclient.getParams(), httpTimeout);
		HttpConnectionParams.setSoTimeout(httpclient.getParams(), socketTimeout);
	    return httpclient;
	}
	
	/**
	 * @Title: isBDHD 
	 * @Description:判断是否为BDHD地址
	 * @param bdhd
	 * @return boolean
	 */
	public static boolean isBDHD(String url) {
		String p = "bdhd[:][/][/][0-9]+[|][0-9a-zA-Z]+[|].+?";
		Pattern pattern = Pattern.compile(p, Pattern.CASE_INSENSITIVE);
		return pattern.matcher(url).find();
	}

    /**
     * 如果url没有scheme，则增加http
     * @param url 
     * @return url
     */
	public static String addSchemeIfNeed(String url) {
		if (TextUtils.isEmpty(url)) {
			return null;
		}
		if (url.startsWith("http://")
				|| url.startsWith("https://")) {
			return url;
		} else {
			return "http://" + url;
		}
	}

}
